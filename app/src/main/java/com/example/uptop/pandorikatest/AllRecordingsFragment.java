package com.example.uptop.pandorikatest;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.LoaderManager;import android.support.v4.content.AsyncTaskLoader;import android.support.v4.content.Loader;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.Menu;import android.view.MenuItem;import android.widget.ImageView;import android.widget.SearchView;import com.example.uptop.pandorikatest.adapters.AllRecordingsAdapter;import com.example.uptop.pandorikatest.database.models.Recordings;import com.example.uptop.pandorikatest.rest.RestService;import com.example.uptop.pandorikatest.rest.model.ItemResultRecordings;import com.example.uptop.pandorikatest.rest.model.RecordingsModel;import com.example.uptop.pandorikatest.util.ConstantManager;import com.example.uptop.pandorikatest.util.NetworkStatusChecker;import org.androidannotations.annotations.AfterViews;import org.androidannotations.annotations.Background;import org.androidannotations.annotations.EFragment;import org.androidannotations.annotations.OptionsMenuItem;import org.androidannotations.annotations.UiThread;import org.androidannotations.annotations.ViewById;import org.androidannotations.api.BackgroundExecutor;import java.util.List;import retrofit.RetrofitError;@EFragment(R.layout.fragment_all_recordings)public class AllRecordingsFragment  extends Fragment {    @ViewById(R.id.all_recordings_recyclerview)    RecyclerView recyclerView;    @ViewById(R.id.record_image)    ImageView imageView;    @OptionsMenuItem(R.id.search_action)    MenuItem menuItem;    private static final String FILTER_ID = "filter_id";    private String name;    private String musicName;    private String imgUrl;    private Recordings recordings;    @AfterViews    public void initRecordings() {        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));        loadRecordings("");    }    @Override    public void onPrepareOptionsMenu(Menu menu) {        super.onPrepareOptionsMenu(menu);        SearchView searchView = (SearchView) menuItem.getActionView();        searchView.setQueryHint(getString(R.string.search_title));        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextSubmit(String query) {                return false;            }            @Override            public boolean onQueryTextChange(String newText) {                BackgroundExecutor.cancelAll(FILTER_ID, true);                if(newText.trim().length() > 5) {                    getAllRecordingsRest(newText);                    queryRecordings(newText);                } else {                    Recordings.removeAllRecordings();                    loadRecordings("");                }                return false;            }        });    }    @Background(delay = 500, id = FILTER_ID)    public void queryRecordings(String filter) {        loadRecordings(filter);    }    @UiThread    public void loadRecordings(final String filter) {        getLoaderManager().restartLoader(0, null, new LoaderManager.LoaderCallbacks<List<Recordings>>() {            @Override            public Loader<List<Recordings>> onCreateLoader(int id, Bundle args) {                final AsyncTaskLoader<List<Recordings>> loader = new AsyncTaskLoader<List<Recordings>>(getActivity()) {                    @Override                    public List<Recordings> loadInBackground() {                        return Recordings.getAllRecordings();                    }                };                loader.forceLoad();                return loader;            }            @Override            public void onLoadFinished(Loader<List<Recordings>> loader, List<Recordings> data) {                AllRecordingsAdapter adapter = (AllRecordingsAdapter) recyclerView.getAdapter();                if(adapter == null) {//                    setPicture(data);                    recyclerView.setAdapter(new AllRecordingsAdapter(data, getActivity()));                } else {                    adapter.refresh(data);                }            }            @Override            public void onLoaderReset(Loader<List<Recordings>> loader) {//                â€‹loader = null;            }        });    }    @Background    public void getAllRecordingsRest(String filter) {        if (!NetworkStatusChecker.isNetworkAvailable(getActivity())) {            return;        }        RestService restService = new RestService();        RecordingsModel recordingsModels;        try {            recordingsModels = restService.getRecordings(filter, ConstantManager.LIMIT);        } catch (RetrofitError e) {            return;        }        for (ItemResultRecordings recording : recordingsModels.getResults()) {            recordings = new Recordings();            name = recording.getArtistName();            musicName = recording.getTrackName();            imgUrl = recording.getArtworkUrl100();            recordings.setImgUrl(imgUrl);            recordings.setMusicName(musicName);            recordings.setArtistName(name);            if (!recordings.exists()) {                recordings.insert();            } else {                break;            }        }    }}